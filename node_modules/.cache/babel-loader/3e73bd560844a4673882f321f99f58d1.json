{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\src\\\\view\\\\Dashbord\\\\SearchScreen.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { flexbox } from \"../../style/mixins\";\nimport * as c from \"../../style/colors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MdKeyboardArrowRight } from \"react-icons/md\";\nimport { filteringArraysAction } from \"../../state/actions/filteredTasksAction\";\nimport TasksLister from \"./TasksLister\";\n\nconst SearchScreen = ({\n  searchIsOpen,\n  setSearchIsOpen\n}) => {\n  const dispatch = useDispatch();\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchInput = _useState2[0],\n        setSearchInput = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        filteredArray = _useState4[0],\n        setFilteredArray = _useState4[1];\n\n  const loggedUser = useSelector(state => state.userReducer[0]);\n  const currentTab = useSelector(state => state.markTabReducer); // const filteredArray = useSelector(state => state.filteringArraysReducer);\n\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\n  useEffect(() => {\n    dispatch(filteringArraysAction([...tasksArrays.todoArray, ...tasksArrays.inProgressArray, ...tasksArrays.completedTasksArray]));\n  }, []);\n\n  const getSearchInput = e => {\n    e.preventDefault();\n\n    if (e.target.value === \"\") {\n      dispatch(filteringArraysAction([...tasksArrays.todoArray, ...tasksArrays.inProgressArray, ...tasksArrays.completedTasksArray]));\n    } else {\n      setSearchInput(e.target.value);\n      let searchInput = e.target.value;\n      dispatch(filteringArraysAction([...tasksArrays.todoArray, ...tasksArrays.inProgressArray, ...tasksArrays.completedTasksArray]));\n      const filteringArrays = [...tasksArrays.todoArray, ...tasksArrays.inProgressArray, ...tasksArrays.completedTasksArray];\n\n      const filteredTasks = (filteringArrays => filteringArrays.filter(task => task.title.toUpperCase().includes(searchInput.toUpperCase())))();\n\n      setFilteredArray(filteredTasks);\n      let arrayAfterFiltering = []; // switch (currentTab) {\n      //   case \"currentTabTodo\":\n      //     arrayAfterFiltering = filteredTasks(filteringArrays.todoArray);\n      //     dispatch(\n      //       filteringArraysAction([\n      //         {\n      //           todoArray: arrayAfterFiltering,\n      //           inProgressArray: loggedUser.inProgressArray,\n      //           completedTasksArray: loggedUser.completedTasksArray\n      //         }\n      //       ])\n      //     );\n      //     break;\n      //   case \"currentTabProgress\":\n      //     arrayAfterFiltering = filteredTasks(filteringArrays.inProgressArray);\n      //     dispatch(\n      //       filteringArraysAction([\n      //         {\n      //           todoArray: arrayAfterFiltering,\n      //           inProgressArray: loggedUser.inProgressArray,\n      //           completedTasksArray: loggedUser.completedTasksArray\n      //         }\n      //       ])\n      //     );\n      //     break;\n      //   case \"currentTabDone\":\n      //     arrayAfterFiltering = filteredTasks(\n      //       filteringArrays.completedTasksArray\n      //     );\n      //     dispatch(\n      //       filteringArraysAction([\n      //         {\n      //           todoArray: arrayAfterFiltering,\n      //           inProgressArray: loggedUser.inProgressArray,\n      //           completedTasksArray: loggedUser.completedTasksArray\n      //         }\n      //       ])\n      //     );\n      //     break;\n      //   default:\n      //     break;\n      // }\n      //   dispatch(filteringArraysAction(arrayAfterFiltering));\n    }\n  };\n\n  return React.createElement(SearchScreenBox, {\n    searchIsOpen: searchIsOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(SearchBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(SearchHeadSction, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(SearchHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Search\")), React.createElement(SearchForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(SearchInput, {\n    onChange: getSearchInput,\n    id: \"searchInput\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(SearchButtonSubmit, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })), React.createElement(TasksDisplay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(TasksLister, {\n    arrayToMap: filteredArray,\n    firstButtonText: \"firstButtonText\",\n    secondButtonText: \"secondButtonText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))));\n};\n\nexport default SearchScreen;\nconst SearchScreenBox = styled.div`\n  ${flexbox()};\n  display: ${({\n  searchIsOpen\n}) => searchIsOpen ? \"block\" : \"none\"};\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(to bottom, #bbd2c5, #536976);\n  position: absolute;\n  z-index: 8;\n`;\nconst SearchHeadSction = styled.div`\n  ${flexbox()};\n  height: 10%;\n`;\nconst SearchHeader = styled.h1`\n  width: 100%;\n  font-size: 3rem;\n  text-align: center;\n  color: white;\n  text-shadow: 3px 3px 0 #000, -1px -1px 0 #000, 1px -1px 0 #000,\n    -1px 1px 0 #000, 1px 1px 0 #000;\n  font-family: \"Titillium Web\", sans-serif;\n  letter-spacing: 3px;\n`;\nconst CloseButton = styled.div``;\nconst SearchBar = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  z-index: 5;\n`;\nconst SearchForm = styled.form`\n  ${flexbox()}\n  width: 100%;\n  position: relative;\n`;\nconst SearchInput = styled.input`\n  border: 1px solid ${c.bgSlateBlue};\n  width: 250px;\n  font-size: 1.1rem;\n  /* width: 130px; */\n`;\nconst SearchButtonSubmit = styled(MdKeyboardArrowRight)`\n  position: relative;\n  right: 17px;\n  /* top: 3px; */\n  background-color: white;\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TasksDisplay = styled.div`\n  vertical-align: top;\n  ${flexbox()};\n  scroll-snap-align: center;\n  scroll-snap-stop: always;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n\n  background: ${c.gradientBlue};\n  box-shadow: inset 2px 2px 6px rgba(54, 73, 79, 0.15),\n    inset -2px -2px 8px rgba(242, 248, 250, 0.2);\n`;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/view/Dashbord/SearchScreen.jsx"],"names":["React","useState","useEffect","styled","keyframes","flexbox","c","useDispatch","useSelector","MdKeyboardArrowRight","filteringArraysAction","TasksLister","SearchScreen","searchIsOpen","setSearchIsOpen","dispatch","searchInput","setSearchInput","filteredArray","setFilteredArray","loggedUser","state","userReducer","currentTab","markTabReducer","tasksArrays","updateArraysReducer","todoArray","inProgressArray","completedTasksArray","getSearchInput","e","preventDefault","target","value","filteringArrays","filteredTasks","filter","task","title","toUpperCase","includes","arrayAfterFiltering","SearchScreenBox","div","SearchHeadSction","SearchHeader","h1","CloseButton","SearchBar","SearchForm","form","SearchInput","input","bgSlateBlue","SearchButtonSubmit","TasksDisplay","gradientBlue"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { flexbox } from \"../../style/mixins\";\r\nimport * as c from \"../../style/colors\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { MdKeyboardArrowRight } from \"react-icons/md\";\r\n\r\nimport { filteringArraysAction } from \"../../state/actions/filteredTasksAction\";\r\n\r\nimport TasksLister from \"./TasksLister\";\r\n\r\nconst SearchScreen = ({ searchIsOpen, setSearchIsOpen }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [filteredArray, setFilteredArray] = useState([]);\r\n\r\n  const loggedUser = useSelector(state => state.userReducer[0]);\r\n  const currentTab = useSelector(state => state.markTabReducer);\r\n  // const filteredArray = useSelector(state => state.filteringArraysReducer);\r\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      filteringArraysAction([\r\n        ...tasksArrays.todoArray,\r\n        ...tasksArrays.inProgressArray,\r\n        ...tasksArrays.completedTasksArray\r\n      ])\r\n    );\r\n  }, []);\r\n\r\n  const getSearchInput = e => {\r\n    e.preventDefault();\r\n    if (e.target.value === \"\") {\r\n      dispatch(\r\n        filteringArraysAction([\r\n          ...tasksArrays.todoArray,\r\n          ...tasksArrays.inProgressArray,\r\n          ...tasksArrays.completedTasksArray\r\n        ])\r\n      );\r\n    } else {\r\n      setSearchInput(e.target.value);\r\n      let searchInput = e.target.value;\r\n      dispatch(\r\n        filteringArraysAction([\r\n          ...tasksArrays.todoArray,\r\n          ...tasksArrays.inProgressArray,\r\n          ...tasksArrays.completedTasksArray\r\n        ])\r\n      );\r\n      const filteringArrays = [\r\n        ...tasksArrays.todoArray,\r\n        ...tasksArrays.inProgressArray,\r\n        ...tasksArrays.completedTasksArray\r\n      ];\r\n\r\n      const filteredTasks = (filteringArrays =>\r\n        filteringArrays.filter(task =>\r\n          task.title.toUpperCase().includes(searchInput.toUpperCase())\r\n        ))();\r\n\r\n      setFilteredArray(filteredTasks);\r\n      let arrayAfterFiltering = [];\r\n\r\n      // switch (currentTab) {\r\n      //   case \"currentTabTodo\":\r\n      //     arrayAfterFiltering = filteredTasks(filteringArrays.todoArray);\r\n      //     dispatch(\r\n      //       filteringArraysAction([\r\n      //         {\r\n      //           todoArray: arrayAfterFiltering,\r\n      //           inProgressArray: loggedUser.inProgressArray,\r\n      //           completedTasksArray: loggedUser.completedTasksArray\r\n      //         }\r\n      //       ])\r\n      //     );\r\n      //     break;\r\n      //   case \"currentTabProgress\":\r\n      //     arrayAfterFiltering = filteredTasks(filteringArrays.inProgressArray);\r\n      //     dispatch(\r\n      //       filteringArraysAction([\r\n      //         {\r\n      //           todoArray: arrayAfterFiltering,\r\n      //           inProgressArray: loggedUser.inProgressArray,\r\n      //           completedTasksArray: loggedUser.completedTasksArray\r\n      //         }\r\n      //       ])\r\n      //     );\r\n      //     break;\r\n      //   case \"currentTabDone\":\r\n      //     arrayAfterFiltering = filteredTasks(\r\n      //       filteringArrays.completedTasksArray\r\n      //     );\r\n      //     dispatch(\r\n      //       filteringArraysAction([\r\n      //         {\r\n      //           todoArray: arrayAfterFiltering,\r\n      //           inProgressArray: loggedUser.inProgressArray,\r\n      //           completedTasksArray: loggedUser.completedTasksArray\r\n      //         }\r\n      //       ])\r\n      //     );\r\n      //     break;\r\n\r\n      //   default:\r\n      //     break;\r\n      // }\r\n      //   dispatch(filteringArraysAction(arrayAfterFiltering));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchScreenBox searchIsOpen={searchIsOpen}>\r\n      <SearchBar>\r\n        <SearchHeadSction>\r\n          <SearchHeader>Search</SearchHeader>\r\n        </SearchHeadSction>\r\n        <SearchForm>\r\n          <SearchInput onChange={getSearchInput} id=\"searchInput\" />\r\n          <SearchButtonSubmit />\r\n        </SearchForm>\r\n        <TasksDisplay>\r\n          {\r\n            <TasksLister\r\n              arrayToMap={filteredArray}\r\n              firstButtonText={\"firstButtonText\"}\r\n              secondButtonText={\"secondButtonText\"}\r\n            />\r\n          }\r\n        </TasksDisplay>\r\n      </SearchBar>\r\n    </SearchScreenBox>\r\n  );\r\n};\r\n\r\nexport default SearchScreen;\r\n\r\nconst SearchScreenBox = styled.div`\r\n  ${flexbox()};\r\n  display: ${({ searchIsOpen }) => (searchIsOpen ? \"block\" : \"none\")};\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(to bottom, #bbd2c5, #536976);\r\n  position: absolute;\r\n  z-index: 8;\r\n`;\r\n\r\nconst SearchHeadSction = styled.div`\r\n  ${flexbox()};\r\n  height: 10%;\r\n`;\r\n\r\nconst SearchHeader = styled.h1`\r\n  width: 100%;\r\n  font-size: 3rem;\r\n  text-align: center;\r\n  color: white;\r\n  text-shadow: 3px 3px 0 #000, -1px -1px 0 #000, 1px -1px 0 #000,\r\n    -1px 1px 0 #000, 1px 1px 0 #000;\r\n  font-family: \"Titillium Web\", sans-serif;\r\n  letter-spacing: 3px;\r\n`;\r\nconst CloseButton = styled.div``;\r\n\r\nconst SearchBar = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  z-index: 5;\r\n`;\r\n\r\nconst SearchForm = styled.form`\r\n  ${flexbox()}\r\n  width: 100%;\r\n  position: relative;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  border: 1px solid ${c.bgSlateBlue};\r\n  width: 250px;\r\n  font-size: 1.1rem;\r\n  /* width: 130px; */\r\n`;\r\n\r\nconst SearchButtonSubmit = styled(MdKeyboardArrowRight)`\r\n  position: relative;\r\n  right: 17px;\r\n  /* top: 3px; */\r\n  background-color: white;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst TasksDisplay = styled.div`\r\n  vertical-align: top;\r\n  ${flexbox()};\r\n  scroll-snap-align: center;\r\n  scroll-snap-stop: always;\r\n  display: inline-block;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  background: ${c.gradientBlue};\r\n  box-shadow: inset 2px 2px 6px rgba(54, 73, 79, 0.15),\r\n    inset -2px -2px 8px rgba(242, 248, 250, 0.2);\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}