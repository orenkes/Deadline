{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var fetchAPI=function fetchAPI(_ref){var urlString,method,userName,userPassword,body,options,getToken,put,post,urls,result,resultJSON;return _regeneratorRuntime.async(function fetchAPI$(_context){while(1){switch(_context.prev=_context.next){case 0:urlString=_ref.urlString,method=_ref.method,userName=_ref.userName,userPassword=_ref.userPassword,body=_ref.body;options={};// <---GET A USER FROM DATABASE USING A TOKEN ON HIS LOCAL STORAGE-->\ngetToken={method:\"GET\",headers:{\"Content-type\":\"application/json; charset=UTF-8\",\"auth-token\":localStorage.getItem(\"token\")}};// <---UPDATING THE TASKS ARRAYS IN THE DB-->\nput={method:\"PUT\",headers:{\"Content-type\":\"application/json; charset=UTF-8\",\"auth-token\":localStorage.getItem(\"token\")},body:JSON.stringify(body)// We send the updated arrays in JSON format\n};//   //<---CREATE A NEW USER IN DB--->\npost={method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(body)};_context.t0=method;_context.next=_context.t0===\"noOption\"?8:_context.t0===\"getByInput\"?10:_context.t0===\"getByToken\"?12:_context.t0===\"updateDB\"?14:_context.t0===\"newUserInDB\"?16:18;break;case 8:options={};return _context.abrupt(\"break\",19);case 10:options={};return _context.abrupt(\"break\",19);case 12:options=getToken;return _context.abrupt(\"break\",19);case 14:options=put;return _context.abrupt(\"break\",19);case 16:options=post;return _context.abrupt(\"break\",19);case 18:return _context.abrupt(\"break\",19);case 19:urls={logWithToken:\"https://tracker-database.youngwebdevs.now.sh/login/loggeduser/\",createUser:\"https://tracker-database.youngwebdevs.now.sh/signup/\",logWithInput:\"https://tracker-database.youngwebdevs.now.sh/login/userfromdb/?userName=\".concat(userName,\"&password=\").concat(userPassword),updateTasks:\"https://tracker-database.youngwebdevs.now.sh/dashboard/updatingarrays\"};_context.next=22;return _regeneratorRuntime.awrap(fetch(urls[urlString],options));case 22:result=_context.sent;if(method===\"getByToken\"||method===\"getByInput\"){localStorage.setItem(\"token\",result.headers.get(\"auth-token\"));}_context.next=26;return _regeneratorRuntime.awrap(result.json());case 26:resultJSON=_context.sent;return _context.abrupt(\"return\",resultJSON);case 28:case\"end\":return _context.stop();}}});};export default fetchAPI;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/service/services.js"],"names":["fetchAPI","urlString","method","userName","userPassword","body","options","getToken","headers","localStorage","getItem","put","JSON","stringify","post","urls","logWithToken","createUser","logWithInput","updateTasks","fetch","result","setItem","get","json","resultJSON"],"mappings":"4IAAA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,0NACfC,SADe,MACfA,SADe,CAEfC,MAFe,MAEfA,MAFe,CAGfC,QAHe,MAGfA,QAHe,CAIfC,YAJe,MAIfA,YAJe,CAKfC,IALe,MAKfA,IALe,CAOXC,OAPW,CAOD,EAPC,CASf;AAEMC,QAXS,CAWE,CACfL,MAAM,CAAE,KADO,CAEfM,OAAO,CAAE,CACP,eAAgB,iCADT,CAEP,aAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAFP,CAFM,CAXF,CAmBf;AAEMC,GArBS,CAqBH,CACVT,MAAM,CAAE,KADE,CAEVM,OAAO,CAAE,CACP,eAAgB,iCADT,CAEP,aAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAFP,CAFC,CAMVL,IAAI,CAAEO,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAqB;AANjB,CArBG,CA8Bf;AAEMS,IAhCS,CAgCF,CACXZ,MAAM,CAAE,MADG,CAEXM,OAAO,CAAE,CACP,eAAgB,kBADT,CAFE,CAKXH,IAAI,CAAEO,IAAI,CAACC,SAAL,CAAeR,IAAf,CALK,CAhCE,aAwCPH,MAxCO,6BAyCR,UAzCQ,iBA4CR,YA5CQ,kBA+CR,YA/CQ,kBAkDR,UAlDQ,kBAqDR,aArDQ,oBA0CXI,OAAO,CAAG,EAAV,CA1CW,2CA6CXA,OAAO,CAAG,EAAV,CA7CW,2CAgDXA,OAAO,CAAGC,QAAV,CAhDW,2CAmDXD,OAAO,CAAGK,GAAV,CAnDW,2CAsDXL,OAAO,CAAGQ,IAAV,CAtDW,sFA4DTC,IA5DS,CA4DF,CACXC,YAAY,iEADD,CAEXC,UAAU,uDAFC,CAGXC,YAAY,mFAA6Ef,QAA7E,sBAAkGC,YAAlG,CAHD,CAIXe,WAAW,wEAJA,CA5DE,mDAmEMC,KAAK,CAACL,IAAI,CAACd,SAAD,CAAL,CAAkBK,OAAlB,CAnEX,UAmETe,MAnES,eAoEf,GAAInB,MAAM,GAAK,YAAX,EAA2BA,MAAM,GAAK,YAA1C,CAAwD,CACtDO,YAAY,CAACa,OAAb,CAAqB,OAArB,CAA8BD,MAAM,CAACb,OAAP,CAAee,GAAf,CAAmB,YAAnB,CAA9B,EACD,CAtEc,kDAuEUF,MAAM,CAACG,IAAP,EAvEV,UAuETC,UAvES,+CAwERA,UAxEQ,iDAAjB,CA2EA,cAAezB,CAAAA,QAAf","sourcesContent":["const fetchAPI = async ({\r\n  urlString,\r\n  method,\r\n  userName,\r\n  userPassword,\r\n  body\r\n}) => {\r\n  let options = {};\r\n\r\n  // <---GET A USER FROM DATABASE USING A TOKEN ON HIS LOCAL STORAGE-->\r\n\r\n  const getToken = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      \"auth-token\": localStorage.getItem(\"token\")\r\n    }\r\n  };\r\n\r\n  // <---UPDATING THE TASKS ARRAYS IN THE DB-->\r\n\r\n  const put = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      \"auth-token\": localStorage.getItem(\"token\")\r\n    },\r\n    body: JSON.stringify(body) // We send the updated arrays in JSON format\r\n  };\r\n\r\n  //   //<---CREATE A NEW USER IN DB--->\r\n\r\n  const post = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(body)\r\n  };\r\n\r\n  switch (method) {\r\n    case \"noOption\":\r\n      options = {};\r\n      break;\r\n    case \"getByInput\":\r\n      options = {};\r\n      break;\r\n    case \"getByToken\":\r\n      options = getToken;\r\n      break;\r\n    case \"updateDB\":\r\n      options = put;\r\n      break;\r\n    case \"newUserInDB\":\r\n      options = post;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const urls = {\r\n    logWithToken: `https://tracker-database.youngwebdevs.now.sh/login/loggeduser/`,\r\n    createUser: `https://tracker-database.youngwebdevs.now.sh/signup/`,\r\n    logWithInput: `https://tracker-database.youngwebdevs.now.sh/login/userfromdb/?userName=${userName}&password=${userPassword}`,\r\n    updateTasks: `https://tracker-database.youngwebdevs.now.sh/dashboard/updatingarrays`\r\n  };\r\n\r\n  const result = await fetch(urls[urlString], options);\r\n  if (method === \"getByToken\" || method === \"getByInput\") {\r\n    localStorage.setItem(\"token\", result.headers.get(\"auth-token\"));\r\n  }\r\n  const resultJSON = await result.json();\r\n  return resultJSON;\r\n};\r\n\r\nexport default fetchAPI;\r\n"]},"metadata":{},"sourceType":"module"}