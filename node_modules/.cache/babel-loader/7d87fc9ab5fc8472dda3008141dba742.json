{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\src\\\\view\\\\Dashbord\\\\TasksLister.jsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Task from \"./Task/Task\";\nimport { flexbox } from \"../../style/mixins\";\n\nconst TasksLister = ({\n  arrayToMap,\n  firstButtonText,\n  secondButtonText\n}) => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        refreshCounter = _useState2[0],\n        setRefreshCounter = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        buttonsText = _useState4[0],\n        SetButtonsText = _useState4[1]; //<--SORTING THE TASKS BY DEADLINE-->//\n\n\n  const compare = (a, b) => {\n    const timeA = a.dateAndTimeSum;\n    const timeB = b.dateAndTimeSum;\n    let comparison = 0;\n\n    if (timeA > timeB) {\n      comparison = 1;\n    } else if (timeA < timeB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  };\n\n  arrayToMap.sort(compare); // <----------------------------->\n\n  const selectingTaskText = () => {\n    switch (task.status) {\n      case \"todo\":\n        SetButtonsText([\"Forward to In Progress\", \"Forward to Done\"]);\n        break;\n\n      case \"todo\":\n        SetButtonsText([\"Forward to Done\", \"Return to Todo\"]);\n        break;\n\n      case \"todo\":\n        SetButtonsText([\"Return to In Progress\", \"Return to Todo\"]);\n        break;\n    }\n  };\n\n  const tasksMap = () => {\n    return arrayToMap.map((task, index) => {\n      return React.createElement(Task, {\n        id: task.id,\n        key: index,\n        dayText: task.dayText,\n        monthText: task.monthText,\n        dayNumber: task.dayNumber,\n        dateAndTimeSum: task.dateAndTimeSum,\n        time: task.time,\n        year: task.year,\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline,\n        colorway: task.colorway,\n        urgency: task.urgency,\n        status: task.status,\n        firstButtonText: buttonsText[0],\n        secondButtonText: buttonsText[1],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    });\n  };\n\n  return React.createElement(TasksList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, tasksMap());\n};\n\nexport default TasksLister;\nconst TasksList = styled.div`\n  ${flexbox({\n  jc: \"flex-start\",\n  ai: \"flex-start\"\n})}\n  align-content: flex-start;\n  padding: 20px;\n  flex-wrap: wrap;\n  height: 100%;\n  width: 100%;\n  overflow-y: auto;\n`;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/view/Dashbord/TasksLister.jsx"],"names":["React","useState","styled","Task","flexbox","TasksLister","arrayToMap","firstButtonText","secondButtonText","refreshCounter","setRefreshCounter","buttonsText","SetButtonsText","compare","a","b","timeA","dateAndTimeSum","timeB","comparison","sort","selectingTaskText","task","status","tasksMap","map","index","id","dayText","monthText","dayNumber","time","year","title","description","deadline","colorway","urgency","TasksList","div","jc","ai"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Task from \"./Task/Task\";\r\nimport { flexbox } from \"../../style/mixins\";\r\n\r\nconst TasksLister = ({ arrayToMap, firstButtonText, secondButtonText }) => {\r\n  const [refreshCounter, setRefreshCounter] = useState(0);\r\n  const [buttonsText, SetButtonsText] = useState([]);\r\n\r\n  //<--SORTING THE TASKS BY DEADLINE-->//\r\n  const compare = (a, b) => {\r\n    const timeA = a.dateAndTimeSum;\r\n    const timeB = b.dateAndTimeSum;\r\n\r\n    let comparison = 0;\r\n    if (timeA > timeB) {\r\n      comparison = 1;\r\n    } else if (timeA < timeB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  };\r\n\r\n  arrayToMap.sort(compare);\r\n  // <----------------------------->\r\n\r\n  const selectingTaskText = () => {\r\n    switch (task.status) {\r\n      case \"todo\":\r\n        SetButtonsText([\"Forward to In Progress\", \"Forward to Done\"]);\r\n        break;\r\n      case \"todo\":\r\n        SetButtonsText([\"Forward to Done\", \"Return to Todo\"]);\r\n        break;\r\n      case \"todo\":\r\n        SetButtonsText([\"Return to In Progress\", \"Return to Todo\"]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const tasksMap = () => {\r\n    return arrayToMap.map((task, index) => {\r\n      return (\r\n        <Task\r\n          id={task.id}\r\n          key={index}\r\n          dayText={task.dayText}\r\n          monthText={task.monthText}\r\n          dayNumber={task.dayNumber}\r\n          dateAndTimeSum={task.dateAndTimeSum}\r\n          time={task.time}\r\n          year={task.year}\r\n          title={task.title}\r\n          description={task.description}\r\n          deadline={task.deadline}\r\n          colorway={task.colorway}\r\n          urgency={task.urgency}\r\n          status={task.status}\r\n          firstButtonText={buttonsText[0]}\r\n          secondButtonText={buttonsText[1]}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return <TasksList>{tasksMap()}</TasksList>;\r\n};\r\n\r\nexport default TasksLister;\r\n\r\nconst TasksList = styled.div`\r\n  ${flexbox({ jc: \"flex-start\", ai: \"flex-start\" })}\r\n  align-content: flex-start;\r\n  padding: 20px;\r\n  flex-wrap: wrap;\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}