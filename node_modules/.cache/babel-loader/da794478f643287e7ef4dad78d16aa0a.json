{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\src\\\\view\\\\Dashbord\\\\Todo\\\\Todo.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { flexbox } from \"../../../style/mixins\";\nimport * as c from \"../../../style/colors\";\nimport Task from \"../Task\"; //-------- Redux --------//\n\nimport { markTodo } from \"../../../state/actions/markTabAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useInView } from \"react-intersection-observer\";\n\nconst Todo = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        refreshCounter = _useState2[0],\n        setRefreshCounter = _useState2[1];\n\n  const _useInView = useInView({\n    threshold: 0.5\n  }),\n        _useInView2 = _slicedToArray(_useInView, 2),\n        ref = _useInView2[0],\n        inView = _useInView2[1];\n\n  const dispatch = useDispatch();\n  const loggedUser = useSelector(state => state.userReducer[0]);\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\n  useEffect(() => {\n    todoTasks();\n    console.log(\"tasksArrays\", tasksArrays);\n  }, [refreshCounter]);\n  useEffect(() => {\n    dispatchCurrentTab();\n  }, [inView]);\n\n  const dispatchCurrentTab = () => {\n    if (inView) {\n      dispatch(markTodo());\n    }\n  };\n\n  const todoTasks = () => {\n    return tasksArrays.todoArray.map((task, index) => {\n      return React.createElement(Task, {\n        id: task.id,\n        key: index,\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline,\n        colorway: task.colorway,\n        status: task.status,\n        refreshCounter: refreshCounter,\n        setRefreshCounter: setRefreshCounter,\n        firstButtonText: \"Forward to In Progress\",\n        secondButtonText: \"Forward to Done\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      });\n    });\n  };\n\n  return React.createElement(Wrapper, {\n    id: \"todo\",\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(TasksList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, todoTasks()));\n};\n\nexport default Todo;\nconst Wrapper = styled.div`\n  vertical-align: top;\n  ${flexbox()};\n  scroll-snap-align: center;\n  scroll-snap-stop: always;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n\n  background: ${c.gradientBlue};\n  box-shadow: inset 2px 2px 6px rgba(54, 73, 79, 0.15),\n    inset -2px -2px 8px rgba(242, 248, 250, 0.2);\n`;\nconst TasksList = styled.div`\n  /* ${flexbox({\n  dir: \"column\",\n  jc: \"flex-start\"\n})}; */\n  height: 100%;\n  width: 100%;\n  overflow-y: auto;\n`;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/view/Dashbord/Todo/Todo.jsx"],"names":["React","useState","useEffect","styled","flexbox","c","Task","markTodo","useSelector","useDispatch","useInView","Todo","refreshCounter","setRefreshCounter","threshold","ref","inView","dispatch","loggedUser","state","userReducer","tasksArrays","updateArraysReducer","todoTasks","console","log","dispatchCurrentTab","todoArray","map","task","index","id","title","description","deadline","colorway","status","Wrapper","div","gradientBlue","TasksList","dir","jc"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,OAAT,QAAwB,uBAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AAEA,OAAOC,IAAP,MAAiB,SAAjB,C,CACA;;AACA,SAASC,QAAT,QAAyB,sCAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,6BAA1B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA,oBAC2BV,QAAQ,CAAC,CAAD,CADnC;AAAA;AAAA,QACVW,cADU;AAAA,QACMC,iBADN;;AAAA,qBAEKH,SAAS,CAAC;AAAEI,IAAAA,SAAS,EAAE;AAAb,GAAD,CAFd;AAAA;AAAA,QAEVC,GAFU;AAAA,QAELC,MAFK;;AAIjB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,UAAU,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkB,CAAlB,CAAV,CAA9B;AACA,QAAMC,WAAW,GAAGb,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACG,mBAAhB,CAA/B;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,SAAS;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,WAA3B;AACD,GAHQ,EAGN,CAACT,cAAD,CAHM,CAAT;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,CAACV,MAAD,CAFM,CAAT;;AAIA,QAAMU,kBAAkB,GAAG,MAAM;AAC/B,QAAIV,MAAJ,EAAY;AACVC,MAAAA,QAAQ,CAACV,QAAQ,EAAT,CAAR;AACD;AACF,GAJD;;AAMA,QAAMgB,SAAS,GAAG,MAAM;AACtB,WAAOF,WAAW,CAACM,SAAZ,CAAsBC,GAAtB,CAA0B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChD,aACE,oBAAC,IAAD;AACE,QAAA,EAAE,EAAED,IAAI,CAACE,EADX;AAEE,QAAA,GAAG,EAAED,KAFP;AAGE,QAAA,KAAK,EAAED,IAAI,CAACG,KAHd;AAIE,QAAA,WAAW,EAAEH,IAAI,CAACI,WAJpB;AAKE,QAAA,QAAQ,EAAEJ,IAAI,CAACK,QALjB;AAME,QAAA,QAAQ,EAAEL,IAAI,CAACM,QANjB;AAOE,QAAA,MAAM,EAAEN,IAAI,CAACO,MAPf;AAQE,QAAA,cAAc,EAAExB,cARlB;AASE,QAAA,iBAAiB,EAAEC,iBATrB;AAUE,QAAA,eAAe,EAAE,wBAVnB;AAWE,QAAA,gBAAgB,EAAE,iBAXpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAeD,KAhBM,CAAP;AAiBD,GAlBD;;AAoBA,SACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAEE,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYQ,SAAS,EAArB,CADF,CADF;AAKD,CAhDD;;AAkDA,eAAeZ,IAAf;AAEA,MAAM0B,OAAO,GAAGlC,MAAM,CAACmC,GAAI;;IAEvBlC,OAAO,EAAG;;;;;;;gBAOEC,CAAC,CAACkC,YAAa;;;CAT/B;AAcA,MAAMC,SAAS,GAAGrC,MAAM,CAACmC,GAAI;OACtBlC,OAAO,CAAC;AAAEqC,EAAAA,GAAG,EAAE,QAAP;AAAiBC,EAAAA,EAAE,EAAE;AAArB,CAAD,CAAsC;;;;CADpD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { flexbox } from \"../../../style/mixins\";\r\nimport * as c from \"../../../style/colors\";\r\n\r\nimport Task from \"../Task\";\r\n//-------- Redux --------//\r\nimport { markTodo } from \"../../../state/actions/markTabAction\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nconst Todo = () => {\r\n  const [refreshCounter, setRefreshCounter] = useState(0);\r\n  const [ref, inView] = useInView({ threshold: 0.5 });\r\n\r\n  const dispatch = useDispatch();\r\n  const loggedUser = useSelector(state => state.userReducer[0]);\r\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\r\n\r\n  useEffect(() => {\r\n    todoTasks();\r\n    console.log(\"tasksArrays\", tasksArrays);\r\n  }, [refreshCounter]);\r\n\r\n  useEffect(() => {\r\n    dispatchCurrentTab();\r\n  }, [inView]);\r\n\r\n  const dispatchCurrentTab = () => {\r\n    if (inView) {\r\n      dispatch(markTodo());\r\n    }\r\n  };\r\n\r\n  const todoTasks = () => {\r\n    return tasksArrays.todoArray.map((task, index) => {\r\n      return (\r\n        <Task\r\n          id={task.id}\r\n          key={index}\r\n          title={task.title}\r\n          description={task.description}\r\n          deadline={task.deadline}\r\n          colorway={task.colorway}\r\n          status={task.status}\r\n          refreshCounter={refreshCounter}\r\n          setRefreshCounter={setRefreshCounter}\r\n          firstButtonText={\"Forward to In Progress\"}\r\n          secondButtonText={\"Forward to Done\"}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper id=\"todo\" ref={ref}>\r\n      <TasksList>{todoTasks()}</TasksList>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n\r\nconst Wrapper = styled.div`\r\n  vertical-align: top;\r\n  ${flexbox()};\r\n  scroll-snap-align: center;\r\n  scroll-snap-stop: always;\r\n  display: inline-block;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  background: ${c.gradientBlue};\r\n  box-shadow: inset 2px 2px 6px rgba(54, 73, 79, 0.15),\r\n    inset -2px -2px 8px rgba(242, 248, 250, 0.2);\r\n`;\r\n\r\nconst TasksList = styled.div`\r\n  /* ${flexbox({ dir: \"column\", jc: \"flex-start\" })}; */\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}