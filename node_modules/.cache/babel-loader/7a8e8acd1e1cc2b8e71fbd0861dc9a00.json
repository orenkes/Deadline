{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\src\\\\view\\\\Dashbord\\\\TasksLister.jsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Task from \"./Task/Task\";\nimport { flexbox } from \"../../style/mixins\";\n\nconst TasksLister = ({\n  arrayToMap,\n  firstButtonText,\n  secondButtonText\n}) => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        refreshCounter = _useState2[0],\n        setRefreshCounter = _useState2[1]; //<--SORTING THE TASKS BY DEADLINE-->//\n\n\n  function compare(a, b) {\n    const timeA = a.dateAndTimeSum;\n    const timeB = b.dateAndTimeSum;\n    let comparison = 0;\n\n    if (timeA > timeB) {\n      comparison = 1;\n    } else if (timeA < timeB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  }\n\n  arrayToMap.sort(compare); // <----------------------------->\n\n  const tasksMap = () => {\n    return arrayToMap.map((task, index) => {\n      return React.createElement(Task, {\n        id: task.id,\n        key: index,\n        dayText: task.dayText,\n        monthText: task.monthText,\n        dayNumber: task.dayNumber,\n        dateAndTimeSum: task.dateAndTimeSum,\n        time: task.time,\n        year: task.year,\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline,\n        colorway: task.colorway,\n        urgency: task.urgency,\n        status: task.status,\n        firstButtonText: firstButtonText,\n        secondButtonText: secondButtonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    });\n  };\n\n  return React.createElement(TasksList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, tasksMap());\n};\n\nexport default TasksLister;\nconst TasksList = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  height: 100%;\n  width: 100%;\n  overflow-y: auto;\n\n  border: 2px solid blue;\n`;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/view/Dashbord/TasksLister.jsx"],"names":["React","useState","styled","Task","flexbox","TasksLister","arrayToMap","firstButtonText","secondButtonText","refreshCounter","setRefreshCounter","compare","a","b","timeA","dateAndTimeSum","timeB","comparison","sort","tasksMap","map","task","index","id","dayText","monthText","dayNumber","time","year","title","description","deadline","colorway","urgency","status","TasksList","div"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,OAAT,QAAwB,oBAAxB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,eAAd;AAA+BC,EAAAA;AAA/B,CAAD,KAAuD;AAAA,oBAC7BP,QAAQ,CAAC,CAAD,CADqB;AAAA;AAAA,QAClEQ,cADkE;AAAA,QAClDC,iBADkD,kBAGzE;;;AACA,WAASC,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,UAAMC,KAAK,GAAGF,CAAC,CAACG,cAAhB;AACA,UAAMC,KAAK,GAAGH,CAAC,CAACE,cAAhB;AAEA,QAAIE,UAAU,GAAG,CAAjB;;AACA,QAAIH,KAAK,GAAGE,KAAZ,EAAmB;AACjBC,MAAAA,UAAU,GAAG,CAAb;AACD,KAFD,MAEO,IAAIH,KAAK,GAAGE,KAAZ,EAAmB;AACxBC,MAAAA,UAAU,GAAG,CAAC,CAAd;AACD;;AACD,WAAOA,UAAP;AACD;;AAEDX,EAAAA,UAAU,CAACY,IAAX,CAAgBP,OAAhB,EAjByE,CAkBzE;;AAEA,QAAMQ,QAAQ,GAAG,MAAM;AACrB,WAAOb,UAAU,CAACc,GAAX,CAAe,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrC,aACE,oBAAC,IAAD;AACE,QAAA,EAAE,EAAED,IAAI,CAACE,EADX;AAEE,QAAA,GAAG,EAAED,KAFP;AAGE,QAAA,OAAO,EAAED,IAAI,CAACG,OAHhB;AAIE,QAAA,SAAS,EAAEH,IAAI,CAACI,SAJlB;AAKE,QAAA,SAAS,EAAEJ,IAAI,CAACK,SALlB;AAME,QAAA,cAAc,EAAEL,IAAI,CAACN,cANvB;AAOE,QAAA,IAAI,EAAEM,IAAI,CAACM,IAPb;AAQE,QAAA,IAAI,EAAEN,IAAI,CAACO,IARb;AASE,QAAA,KAAK,EAAEP,IAAI,CAACQ,KATd;AAUE,QAAA,WAAW,EAAER,IAAI,CAACS,WAVpB;AAWE,QAAA,QAAQ,EAAET,IAAI,CAACU,QAXjB;AAYE,QAAA,QAAQ,EAAEV,IAAI,CAACW,QAZjB;AAaE,QAAA,OAAO,EAAEX,IAAI,CAACY,OAbhB;AAcE,QAAA,MAAM,EAAEZ,IAAI,CAACa,MAdf;AAeE,QAAA,eAAe,EAAE3B,eAfnB;AAgBE,QAAA,gBAAgB,EAAEC,gBAhBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAoBD,KArBM,CAAP;AAsBD,GAvBD;;AAyBA,SAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYW,QAAQ,EAApB,CAAP;AACD,CA9CD;;AAgDA,eAAed,WAAf;AAEA,MAAM8B,SAAS,GAAGjC,MAAM,CAACkC,GAAI;;;;;;;;;;;CAA7B","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Task from \"./Task/Task\";\r\nimport { flexbox } from \"../../style/mixins\";\r\n\r\nconst TasksLister = ({ arrayToMap, firstButtonText, secondButtonText }) => {\r\n  const [refreshCounter, setRefreshCounter] = useState(0);\r\n\r\n  //<--SORTING THE TASKS BY DEADLINE-->//\r\n  function compare(a, b) {\r\n    const timeA = a.dateAndTimeSum;\r\n    const timeB = b.dateAndTimeSum;\r\n\r\n    let comparison = 0;\r\n    if (timeA > timeB) {\r\n      comparison = 1;\r\n    } else if (timeA < timeB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  arrayToMap.sort(compare);\r\n  // <----------------------------->\r\n\r\n  const tasksMap = () => {\r\n    return arrayToMap.map((task, index) => {\r\n      return (\r\n        <Task\r\n          id={task.id}\r\n          key={index}\r\n          dayText={task.dayText}\r\n          monthText={task.monthText}\r\n          dayNumber={task.dayNumber}\r\n          dateAndTimeSum={task.dateAndTimeSum}\r\n          time={task.time}\r\n          year={task.year}\r\n          title={task.title}\r\n          description={task.description}\r\n          deadline={task.deadline}\r\n          colorway={task.colorway}\r\n          urgency={task.urgency}\r\n          status={task.status}\r\n          firstButtonText={firstButtonText}\r\n          secondButtonText={secondButtonText}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return <TasksList>{tasksMap()}</TasksList>;\r\n};\r\n\r\nexport default TasksLister;\r\n\r\nconst TasksList = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n\r\n  border: 2px solid blue;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}