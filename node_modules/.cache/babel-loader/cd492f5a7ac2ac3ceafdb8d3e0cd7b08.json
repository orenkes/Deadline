{"ast":null,"code":"const fetchAPI = async ({\n  urlString,\n  method,\n  paramOne,\n  paramTwo,\n  body\n}) => {\n  let options = {}; // <---GET A USER FROM DATABASE USING A TOKEN ON HIS LOCAL STORAGE-->\n\n  const getToken = {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n      \"auth-token\": localStorage.getItem(\"token\")\n    }\n  }; // <---UPDATING THE TASKS ARRAYS IN THE DB-->\n\n  const put = {\n    method: \"PUT\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n      \"auth-token\": localStorage.getItem(\"token\")\n    },\n    body: JSON.stringify(body) // We send the updated arrays in JSON format\n\n  }; //   //<---CREATE A NEW USER IN DB--->\n\n  const post = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n\n  switch (method) {\n    case \"noOption\":\n      options = {};\n      break;\n\n    case \"getByInput\":\n      options = {};\n      break;\n\n    case \"getByToken\":\n      options = getToken;\n      break;\n\n    case \"put\":\n      options = put;\n      break;\n\n    case \"post\":\n      options = post;\n      break;\n\n    default:\n      break;\n  }\n\n  const urls = {\n    logWithToken: `https://tracker-database.youngwebdevs.now.sh/login/loggeduser/`,\n    createUser: `https://tracker-database.youngwebdevs.now.sh/login/loggeduser/`,\n    loggeWithInput: `https://tracker-database.youngwebdevs.now.sh/login/userfromdb/?userName=${paramOne}&password=${paramTwo}`,\n    put: `https://tracker-database.youngwebdevs.now.sh/dashboard/updatingarrays`\n  };\n  console.log(\"urls[urlString]\", urls[urlString]);\n  const result = await fetch(urls[urlString], options);\n\n  if (method === \"getToken\" || method === \"get\") {\n    localStorage.setItem(\"token\", result.headers.get(\"auth-token\"));\n  }\n\n  const resultJSON = await result.json();\n  return resultJSON;\n};\n\nexport default fetchAPI;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/service/services.js"],"names":["fetchAPI","urlString","method","paramOne","paramTwo","body","options","getToken","headers","localStorage","getItem","put","JSON","stringify","post","urls","logWithToken","createUser","loggeWithInput","console","log","result","fetch","setItem","get","resultJSON","json"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,OAAO;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,MAAb;AAAqBC,EAAAA,QAArB;AAA+BC,EAAAA,QAA/B;AAAyCC,EAAAA;AAAzC,CAAP,KAA2D;AAC1E,MAAIC,OAAO,GAAG,EAAd,CAD0E,CAG1E;;AAEA,QAAMC,QAAQ,GAAG;AACfL,IAAAA,MAAM,EAAE,KADO;AAEfM,IAAAA,OAAO,EAAE;AACP,sBAAgB,iCADT;AAEP,oBAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFP;AAFM,GAAjB,CAL0E,CAa1E;;AAEA,QAAMC,GAAG,GAAG;AACVT,IAAAA,MAAM,EAAE,KADE;AAEVM,IAAAA,OAAO,EAAE;AACP,sBAAgB,iCADT;AAEP,oBAAcC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFP,KAFC;AAMVL,IAAAA,IAAI,EAAEO,IAAI,CAACC,SAAL,CAAeR,IAAf,CANI,CAMiB;;AANjB,GAAZ,CAf0E,CAwB1E;;AAEA,QAAMS,IAAI,GAAG;AACXZ,IAAAA,MAAM,EAAE,MADG;AAEXM,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFE;AAKXH,IAAAA,IAAI,EAAEO,IAAI,CAACC,SAAL,CAAeR,IAAf;AALK,GAAb;;AAQA,UAAQH,MAAR;AACE,SAAK,UAAL;AACEI,MAAAA,OAAO,GAAG,EAAV;AACA;;AACF,SAAK,YAAL;AACEA,MAAAA,OAAO,GAAG,EAAV;AACA;;AACF,SAAK,YAAL;AACEA,MAAAA,OAAO,GAAGC,QAAV;AACA;;AACF,SAAK,KAAL;AACED,MAAAA,OAAO,GAAGK,GAAV;AACA;;AACF,SAAK,MAAL;AACEL,MAAAA,OAAO,GAAGQ,IAAV;AACA;;AACF;AACE;AAjBJ;;AAoBA,QAAMC,IAAI,GAAG;AACXC,IAAAA,YAAY,EAAG,gEADJ;AAEXC,IAAAA,UAAU,EAAG,gEAFF;AAGXC,IAAAA,cAAc,EAAG,2EAA0Ef,QAAS,aAAYC,QAAS,EAH9G;AAIXO,IAAAA,GAAG,EAAG;AAJK,GAAb;AAOAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,IAAI,CAACd,SAAD,CAAnC;AACA,QAAMoB,MAAM,GAAG,MAAMC,KAAK,CAACP,IAAI,CAACd,SAAD,CAAL,EAAkBK,OAAlB,CAA1B;;AACA,MAAIJ,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,KAAxC,EAA+C;AAC7CO,IAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BF,MAAM,CAACb,OAAP,CAAegB,GAAf,CAAmB,YAAnB,CAA9B;AACD;;AACD,QAAMC,UAAU,GAAG,MAAMJ,MAAM,CAACK,IAAP,EAAzB;AACA,SAAOD,UAAP;AACD,CApED;;AAsEA,eAAezB,QAAf","sourcesContent":["const fetchAPI = async ({ urlString, method, paramOne, paramTwo, body }) => {\r\n  let options = {};\r\n\r\n  // <---GET A USER FROM DATABASE USING A TOKEN ON HIS LOCAL STORAGE-->\r\n\r\n  const getToken = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      \"auth-token\": localStorage.getItem(\"token\")\r\n    }\r\n  };\r\n\r\n  // <---UPDATING THE TASKS ARRAYS IN THE DB-->\r\n\r\n  const put = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      \"auth-token\": localStorage.getItem(\"token\")\r\n    },\r\n    body: JSON.stringify(body) // We send the updated arrays in JSON format\r\n  };\r\n\r\n  //   //<---CREATE A NEW USER IN DB--->\r\n\r\n  const post = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(body)\r\n  };\r\n\r\n  switch (method) {\r\n    case \"noOption\":\r\n      options = {};\r\n      break;\r\n    case \"getByInput\":\r\n      options = {};\r\n      break;\r\n    case \"getByToken\":\r\n      options = getToken;\r\n      break;\r\n    case \"put\":\r\n      options = put;\r\n      break;\r\n    case \"post\":\r\n      options = post;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const urls = {\r\n    logWithToken: `https://tracker-database.youngwebdevs.now.sh/login/loggeduser/`,\r\n    createUser: `https://tracker-database.youngwebdevs.now.sh/login/loggeduser/`,\r\n    loggeWithInput: `https://tracker-database.youngwebdevs.now.sh/login/userfromdb/?userName=${paramOne}&password=${paramTwo}`,\r\n    put: `https://tracker-database.youngwebdevs.now.sh/dashboard/updatingarrays`\r\n  };\r\n\r\n  console.log(\"urls[urlString]\", urls[urlString]);\r\n  const result = await fetch(urls[urlString], options);\r\n  if (method === \"getToken\" || method === \"get\") {\r\n    localStorage.setItem(\"token\", result.headers.get(\"auth-token\"));\r\n  }\r\n  const resultJSON = await result.json();\r\n  return resultJSON;\r\n};\r\n\r\nexport default fetchAPI;\r\n"]},"metadata":{},"sourceType":"module"}