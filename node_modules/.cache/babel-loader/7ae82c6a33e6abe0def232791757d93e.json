{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\src\\\\view\\\\Dashbord\\\\Todo\\\\Todo.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { flexbox } from \"../../../style/mixins\";\nimport Task from \"../Task\";\n\nconst Todo = () => {\n  const loggedUser = useSelector(state => state.userReducer[0]);\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        refreshCounter = _useState2[0],\n        setRefreshCounter = _useState2[1];\n\n  useEffect(() => {\n    todoTasks();\n    console.log(\"tasksArrays\", tasksArrays);\n  }, [refreshCounter]); // const todoTasks = () => {\n  //   return tasksArrays.todoArray.map((task, index) => {\n  //     return (\n  //       <Task\n  //         id={task.id}\n  //         key={index}\n  //         title={task.title}\n  //         description={task.description}\n  //         deadline={task.deadline}\n  //         colorway={task.colorway}\n  //         status={task.status}\n  //         refreshCounter={refreshCounter}\n  //         setRefreshCounter={setRefreshCounter}\n  //         firstButtonText={\"Forward to In Progress\"}\n  //         secondButtonText={\"Forward to Done\"}\n  //       />\n  //     );\n  //   });\n  // };\n\n  const _useState3 = useState([{\n    title: \"Go to the bank\",\n    description: \"go and get money\",\n    deadline: \"today\",\n    colorway: \"blue\",\n    _id: 1\n  }, {\n    title: \"Go to the mall\",\n    description: \"go and get money\",\n    deadline: \"today\",\n    colorway: \"red\",\n    _id: 2\n  }]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todoArrayTest = _useState4[0],\n        setTodoArray = _useState4[1];\n\n  const todoTasks = todoArrayTest.map((task, index) => {\n    return React.createElement(Task, {\n      id: task.id,\n      key: index,\n      title: task.title,\n      description: task.description,\n      deadline: task.deadline,\n      colorway: task.colorway,\n      status: task.status,\n      refreshCounter: refreshCounter,\n      setRefreshCounter: setRefreshCounter,\n      firstButtonText: \"Forward to In Progress\",\n      secondButtonText: \"Forward to Done\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  });\n  return React.createElement(Wrapper, {\n    id: \"todo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(TasksList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, todoTasks()));\n};\n\nexport default Todo;\nconst Wrapper = styled.div`\n  vertical-align: top;\n  ${flexbox()};\n  scroll-snap-align: center;\n  scroll-snap-stop: always;\n  background: lightblue;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n`;\nconst TasksList = styled.div`\n  /* ${flexbox({\n  dir: \"column\",\n  jc: \"flex-start\"\n})}; */\n  height: 100%;\n  width: 100%;\n  overflow-y: auto;\n`;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/view/Dashbord/Todo/Todo.jsx"],"names":["React","useState","useEffect","styled","useSelector","useDispatch","flexbox","Task","Todo","loggedUser","state","userReducer","tasksArrays","updateArraysReducer","refreshCounter","setRefreshCounter","todoTasks","console","log","title","description","deadline","colorway","_id","todoArrayTest","setTodoArray","map","task","index","id","status","Wrapper","div","TasksList","dir","jc"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,OAAT,QAAwB,uBAAxB;AAEA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,UAAU,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkB,CAAlB,CAAV,CAA9B;AACA,QAAMC,WAAW,GAAGR,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACG,mBAAhB,CAA/B;;AAFiB,oBAG2BZ,QAAQ,CAAC,CAAD,CAHnC;AAAA;AAAA,QAGVa,cAHU;AAAA,QAGMC,iBAHN;;AAKjBb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,SAAS;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BN,WAA3B;AACD,GAHQ,EAGN,CAACE,cAAD,CAHM,CAAT,CALiB,CAUjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BiB,qBA8BqBb,QAAQ,CAAC,CAC7C;AACEkB,IAAAA,KAAK,EAAE,gBADT;AAEEC,IAAAA,WAAW,EAAE,kBAFf;AAGEC,IAAAA,QAAQ,EAAE,OAHZ;AAIEC,IAAAA,QAAQ,EAAE,MAJZ;AAKEC,IAAAA,GAAG,EAAE;AALP,GAD6C,EAQ7C;AACEJ,IAAAA,KAAK,EAAE,gBADT;AAEEC,IAAAA,WAAW,EAAE,kBAFf;AAGEC,IAAAA,QAAQ,EAAE,OAHZ;AAIEC,IAAAA,QAAQ,EAAE,KAJZ;AAKEC,IAAAA,GAAG,EAAE;AALP,GAR6C,CAAD,CA9B7B;AAAA;AAAA,QA8BVC,aA9BU;AAAA,QA8BKC,YA9BL;;AA+CjB,QAAMT,SAAS,GAAGQ,aAAa,CAACE,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnD,WACE,oBAAC,IAAD;AACE,MAAA,EAAE,EAAED,IAAI,CAACE,EADX;AAEE,MAAA,GAAG,EAAED,KAFP;AAGE,MAAA,KAAK,EAAED,IAAI,CAACR,KAHd;AAIE,MAAA,WAAW,EAAEQ,IAAI,CAACP,WAJpB;AAKE,MAAA,QAAQ,EAAEO,IAAI,CAACN,QALjB;AAME,MAAA,QAAQ,EAAEM,IAAI,CAACL,QANjB;AAOE,MAAA,MAAM,EAAEK,IAAI,CAACG,MAPf;AAQE,MAAA,cAAc,EAAEhB,cARlB;AASE,MAAA,iBAAiB,EAAEC,iBATrB;AAUE,MAAA,eAAe,EAAE,wBAVnB;AAWE,MAAA,gBAAgB,EAAE,iBAXpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAeD,GAhBiB,CAAlB;AAkBA,SACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYC,SAAS,EAArB,CADF,CADF;AAKD,CAtED;;AAwEA,eAAeR,IAAf;AAEA,MAAMuB,OAAO,GAAG5B,MAAM,CAAC6B,GAAI;;IAEvB1B,OAAO,EAAG;;;;;;;CAFd;AAWA,MAAM2B,SAAS,GAAG9B,MAAM,CAAC6B,GAAI;OACtB1B,OAAO,CAAC;AAAE4B,EAAAA,GAAG,EAAE,QAAP;AAAiBC,EAAAA,EAAE,EAAE;AAArB,CAAD,CAAsC;;;;CADpD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { flexbox } from \"../../../style/mixins\";\r\n\r\nimport Task from \"../Task\";\r\n\r\nconst Todo = () => {\r\n  const loggedUser = useSelector(state => state.userReducer[0]);\r\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\r\n  const [refreshCounter, setRefreshCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    todoTasks();\r\n    console.log(\"tasksArrays\", tasksArrays);\r\n  }, [refreshCounter]);\r\n\r\n  // const todoTasks = () => {\r\n  //   return tasksArrays.todoArray.map((task, index) => {\r\n  //     return (\r\n  //       <Task\r\n  //         id={task.id}\r\n  //         key={index}\r\n  //         title={task.title}\r\n  //         description={task.description}\r\n  //         deadline={task.deadline}\r\n  //         colorway={task.colorway}\r\n  //         status={task.status}\r\n  //         refreshCounter={refreshCounter}\r\n  //         setRefreshCounter={setRefreshCounter}\r\n  //         firstButtonText={\"Forward to In Progress\"}\r\n  //         secondButtonText={\"Forward to Done\"}\r\n  //       />\r\n  //     );\r\n  //   });\r\n  // };\r\n\r\n  const [todoArrayTest, setTodoArray] = useState([\r\n    {\r\n      title: \"Go to the bank\",\r\n      description: \"go and get money\",\r\n      deadline: \"today\",\r\n      colorway: \"blue\",\r\n      _id: 1\r\n    },\r\n    {\r\n      title: \"Go to the mall\",\r\n      description: \"go and get money\",\r\n      deadline: \"today\",\r\n      colorway: \"red\",\r\n      _id: 2\r\n    }\r\n  ]);\r\n\r\n  const todoTasks = todoArrayTest.map((task, index) => {\r\n    return (\r\n      <Task\r\n        id={task.id}\r\n        key={index}\r\n        title={task.title}\r\n        description={task.description}\r\n        deadline={task.deadline}\r\n        colorway={task.colorway}\r\n        status={task.status}\r\n        refreshCounter={refreshCounter}\r\n        setRefreshCounter={setRefreshCounter}\r\n        firstButtonText={\"Forward to In Progress\"}\r\n        secondButtonText={\"Forward to Done\"}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Wrapper id=\"todo\">\r\n      <TasksList>{todoTasks()}</TasksList>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n\r\nconst Wrapper = styled.div`\r\n  vertical-align: top;\r\n  ${flexbox()};\r\n  scroll-snap-align: center;\r\n  scroll-snap-stop: always;\r\n  background: lightblue;\r\n  display: inline-block;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst TasksList = styled.div`\r\n  /* ${flexbox({ dir: \"column\", jc: \"flex-start\" })}; */\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}