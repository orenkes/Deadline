{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\orenk\\\\Desktop\\\\Netcraft\\\\projects\\\\tracker\\\\tracker\\\\src\\\\view\\\\Dashbord\\\\SearchComponent\\\\SearchComponent.jsx\";\nimport React, { useEffect } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { flexbox } from \"../../../style/mixins\";\nimport * as c from \"../../../style/colors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { filteringArraysAction } from \"../../../state/actions/filteredTasksAction\";\nimport TasksLister from \"../TasksLister\";\n\nconst SearchScreen = () => {\n  const dispatch = useDispatch();\n  const searchIsOpen = useSelector(state => state.searchWindowReducer);\n  const desktopView = useSelector(state => state.toggleViewReducer);\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\n  const filteringArrays = useSelector(state => state.filteringArraysReducer);\n  useEffect(() => {\n    dispatch(filteringArraysAction([...tasksArrays.todoArray, ...tasksArrays.inProgressArray, ...tasksArrays.completedTasksArray]));\n  }, [tasksArrays]);\n\n  const getSearchInput = e => {\n    e.preventDefault();\n\n    if (e.target.value === \"\") {\n      dispatch(filteringArraysAction([...tasksArrays.todoArray, ...tasksArrays.inProgressArray, ...tasksArrays.completedTasksArray]));\n    } else {\n      let searchInput = e.target.value;\n      const allTasksArray = [...tasksArrays.todoArray, ...tasksArrays.inProgressArray, ...tasksArrays.completedTasksArray];\n      const filteredTasks = allTasksArray.filter(task => task.title.toUpperCase().includes(searchInput.toUpperCase()));\n      dispatch(filteringArraysAction([...filteredTasks]));\n    }\n  };\n\n  return React.createElement(SearchScreenBox, {\n    searchIsOpen: searchIsOpen,\n    desktopView: desktopView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(SearchHeadSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(SearchInput, {\n    placeholder: \"Search Deadline\",\n    onChange: getSearchInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(TasksDisplay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(TasksLister, {\n    arrayToMap: filteringArrays,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })));\n};\n\nexport default SearchScreen;\nconst SearchScreenBox = styled.div`\n  ${flexbox()};\n  display: ${({\n  searchIsOpen\n}) => searchIsOpen ? \"block\" : \"none\"};\n  width: 100%;\n  height: 100%;\n  height: calc(100% - 70px);\n  background: ${c.gradientCyan};\n  position: absolute;\n  bottom: 0;\n  z-index: 8;\n\n  @media (min-width: 769px) {\n    max-width: ${({\n  desktopView\n}) => desktopView ? \"1200px\" : \"500px\"};\n  }\n`;\nconst SearchHeadSection = styled.div`\n  position: relative;\n  ${flexbox()};\n  height: 10%;\n  width: 100%;\n  font-size: 3rem;\n  text-align: center;\n  color: white;\n  font-family: \"Montserrat\", sans-serif;\n  font-weight: bold;\n  letter-spacing: 3px;\n  z-index: 3;\n  box-shadow: 0 20px 20px -20px lightslategray;\n`;\nconst SearchInput = styled.input`\n  height: 100%;\n  border: none;\n  background: ${c.inputShyBlue};\n  font-family: \"Helvetica Neue\", sans-serif;\n  border-radius: 25px;\n  padding-left: 15px;\n  width: 80%;\n  max-width: 400px;\n  height: 50px;\n  font-size: 1.1rem;\n  outline: none;\n  :focus {\n    filter: brightness(1.1);\n  }\n\n  box-shadow: ${c.inputShadows};\n`;\nconst TasksDisplay = styled.div`\n  ${flexbox()};\n  height: 90%;\n  width: 100%;\n  overflow-y: auto;\n`;","map":{"version":3,"sources":["C:/Users/orenk/Desktop/Netcraft/projects/tracker/tracker/src/view/Dashbord/SearchComponent/SearchComponent.jsx"],"names":["React","useEffect","styled","keyframes","flexbox","c","useDispatch","useSelector","filteringArraysAction","TasksLister","SearchScreen","dispatch","searchIsOpen","state","searchWindowReducer","desktopView","toggleViewReducer","tasksArrays","updateArraysReducer","filteringArrays","filteringArraysReducer","todoArray","inProgressArray","completedTasksArray","getSearchInput","e","preventDefault","target","value","searchInput","allTasksArray","filteredTasks","filter","task","title","toUpperCase","includes","SearchScreenBox","div","gradientCyan","SearchHeadSection","SearchInput","input","inputShyBlue","inputShadows","TasksDisplay"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { flexbox } from \"../../../style/mixins\";\r\nimport * as c from \"../../../style/colors\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { filteringArraysAction } from \"../../../state/actions/filteredTasksAction\";\r\n\r\nimport TasksLister from \"../TasksLister\";\r\n\r\nconst SearchScreen = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const searchIsOpen = useSelector(state => state.searchWindowReducer);\r\n  const desktopView = useSelector(state => state.toggleViewReducer);\r\n  const tasksArrays = useSelector(state => state.updateArraysReducer);\r\n  const filteringArrays = useSelector(state => state.filteringArraysReducer);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      filteringArraysAction([\r\n        ...tasksArrays.todoArray,\r\n        ...tasksArrays.inProgressArray,\r\n        ...tasksArrays.completedTasksArray\r\n      ])\r\n    );\r\n  }, [tasksArrays]);\r\n\r\n  const getSearchInput = e => {\r\n    e.preventDefault();\r\n    if (e.target.value === \"\") {\r\n      dispatch(\r\n        filteringArraysAction([\r\n          ...tasksArrays.todoArray,\r\n          ...tasksArrays.inProgressArray,\r\n          ...tasksArrays.completedTasksArray\r\n        ])\r\n      );\r\n    } else {\r\n      let searchInput = e.target.value;\r\n\r\n      const allTasksArray = [\r\n        ...tasksArrays.todoArray,\r\n        ...tasksArrays.inProgressArray,\r\n        ...tasksArrays.completedTasksArray\r\n      ];\r\n\r\n      const filteredTasks = allTasksArray.filter(task =>\r\n        task.title.toUpperCase().includes(searchInput.toUpperCase())\r\n      );\r\n\r\n      dispatch(filteringArraysAction([...filteredTasks]));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchScreenBox searchIsOpen={searchIsOpen} desktopView={desktopView}>\r\n      <SearchHeadSection>\r\n        <SearchInput placeholder=\"Search Deadline\" onChange={getSearchInput} />\r\n      </SearchHeadSection>\r\n      <TasksDisplay>\r\n        <TasksLister arrayToMap={filteringArrays} />\r\n      </TasksDisplay>\r\n    </SearchScreenBox>\r\n  );\r\n};\r\n\r\nexport default SearchScreen;\r\n\r\nconst SearchScreenBox = styled.div`\r\n  ${flexbox()};\r\n  display: ${({ searchIsOpen }) => (searchIsOpen ? \"block\" : \"none\")};\r\n  width: 100%;\r\n  height: 100%;\r\n  height: calc(100% - 70px);\r\n  background: ${c.gradientCyan};\r\n  position: absolute;\r\n  bottom: 0;\r\n  z-index: 8;\r\n\r\n  @media (min-width: 769px) {\r\n    max-width: ${({ desktopView }) => (desktopView ? \"1200px\" : \"500px\")};\r\n  }\r\n`;\r\n\r\nconst SearchHeadSection = styled.div`\r\n  position: relative;\r\n  ${flexbox()};\r\n  height: 10%;\r\n  width: 100%;\r\n  font-size: 3rem;\r\n  text-align: center;\r\n  color: white;\r\n  font-family: \"Montserrat\", sans-serif;\r\n  font-weight: bold;\r\n  letter-spacing: 3px;\r\n  z-index: 3;\r\n  box-shadow: 0 20px 20px -20px lightslategray;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  height: 100%;\r\n  border: none;\r\n  background: ${c.inputShyBlue};\r\n  font-family: \"Helvetica Neue\", sans-serif;\r\n  border-radius: 25px;\r\n  padding-left: 15px;\r\n  width: 80%;\r\n  max-width: 400px;\r\n  height: 50px;\r\n  font-size: 1.1rem;\r\n  outline: none;\r\n  :focus {\r\n    filter: brightness(1.1);\r\n  }\r\n\r\n  box-shadow: ${c.inputShadows};\r\n`;\r\n\r\nconst TasksDisplay = styled.div`\r\n  ${flexbox()};\r\n  height: 90%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}